//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.46.1.0
//   At: 2023-11-21T12:18:26.9505487+00:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<CommandLineServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<FullyKioskServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HiveServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HueServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<IcloudServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        serviceCollection.AddTransient<ZwaveJsServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    LockEntities Lock { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    SceneEntities Scene { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Front door Infra red lights in night mode</summary>
    public LightEntity FrontDoorInfraRedLightsInNightMode => new(_haContext, "light.front_door_infra_red_lights_in_night_mode");
    ///<summary>Kitchen1</summary>
    public LightEntity HueWhiteSpot1 => new(_haContext, "light.hue_white_spot_1");
    ///<summary>Kitchen2</summary>
    public LightEntity HueWhiteSpot12 => new(_haContext, "light.hue_white_spot_1_2");
    ///<summary>Kitchen3</summary>
    public LightEntity HueWhiteSpot13 => new(_haContext, "light.hue_white_spot_1_3");
    ///<summary>Kitchen7</summary>
    public LightEntity HueWhiteSpot14 => new(_haContext, "light.hue_white_spot_1_4");
    ///<summary>Sun room 1</summary>
    public LightEntity HueWhiteSpot15 => new(_haContext, "light.hue_white_spot_1_5");
    ///<summary>Kitchen5</summary>
    public LightEntity HueWhiteSpot2 => new(_haContext, "light.hue_white_spot_2");
    ///<summary>Sun room 2</summary>
    public LightEntity HueWhiteSpot22 => new(_haContext, "light.hue_white_spot_2_2");
    ///<summary>Kitchen4</summary>
    public LightEntity HueWhiteSpot3 => new(_haContext, "light.hue_white_spot_3");
    ///<summary>Sun room 6</summary>
    public LightEntity HueWhiteSpot32 => new(_haContext, "light.hue_white_spot_3_2");
    ///<summary>Kitchen9</summary>
    public LightEntity HueWhiteSpot4 => new(_haContext, "light.hue_white_spot_4");
    ///<summary>Sun room 3</summary>
    public LightEntity HueWhiteSpot42 => new(_haContext, "light.hue_white_spot_4_2");
    ///<summary>Kitchen8</summary>
    public LightEntity HueWhiteSpot5 => new(_haContext, "light.hue_white_spot_5");
    ///<summary>Sun room 4</summary>
    public LightEntity HueWhiteSpot52 => new(_haContext, "light.hue_white_spot_5_2");
    ///<summary>Kitchen6</summary>
    public LightEntity HueWhiteSpot6 => new(_haContext, "light.hue_white_spot_6");
    ///<summary>Sun room 5</summary>
    public LightEntity HueWhiteSpot62 => new(_haContext, "light.hue_white_spot_6_2");
    ///<summary>Jo&apos;s lamp</summary>
    public LightEntity JoSLamp => new(_haContext, "light.jo_s_lamp");
    ///<summary>Kitchen Lights</summary>
    public LightEntity Kitchen => new(_haContext, "light.kitchen");
    ///<summary>Kitchen lights</summary>
    public LightEntity KitchenLights => new(_haContext, "light.kitchen_lights");
    ///<summary>Living room</summary>
    public LightEntity LivingRoom => new(_haContext, "light.living_room");
    ///<summary>Living room lights</summary>
    public LightEntity LivingRoomLights => new(_haContext, "light.living_room_lights");
    ///<summary>LR Wall back</summary>
    public LightEntity LrWallBack => new(_haContext, "light.lr_wall_back");
    ///<summary>LR Wall front</summary>
    public LightEntity LrWallFront => new(_haContext, "light.lr_wall_front");
    ///<summary>LR Window back</summary>
    public LightEntity LrWindowBack => new(_haContext, "light.lr_window_back");
    ///<summary>LR Window front</summary>
    public LightEntity LrWindowFront => new(_haContext, "light.lr_window_front");
    ///<summary>Parents</summary>
    public LightEntity Parents => new(_haContext, "light.parents");
    ///<summary>Roof</summary>
    public LightEntity Roof => new(_haContext, "light.roof");
    ///<summary>Roof lights</summary>
    public LightEntity RoofLights => new(_haContext, "light.roof_lights");
    ///<summary>Scott&apos;s lamp</summary>
    public LightEntity ScottSLamp => new(_haContext, "light.scott_s_lamp");
    ///<summary>Sun room</summary>
    public LightEntity SunRoom => new(_haContext, "light.sun_room");
    ///<summary>Sunroom lights</summary>
    public LightEntity SunroomLights => new(_haContext, "light.sunroom_lights");
    ///<summary>Theo</summary>
    public LightEntity Theo => new(_haContext, "light.theo");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public MediaPlayerEntity FireTablet => new(_haContext, "media_player.fire_tablet");
    ///<summary>LG webOS TV BA72</summary>
    public MediaPlayerEntity LgWebosTvBa72 => new(_haContext, "media_player.lg_webos_tv_ba72");
    ///<summary>[LG] webOS TV OLED55A16LA</summary>
    public MediaPlayerEntity LgWebosTvOled55a16la => new(_haContext, "media_player.lg_webos_tv_oled55a16la");
    ///<summary>XboxOne</summary>
    public MediaPlayerEntity Xboxone => new(_haContext, "media_player.xboxone");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alert when FTP folder stops updating</summary>
    public AutomationEntity AlertWhenFtpFolderStopsUpdating => new(_haContext, "automation.alert_when_ftp_folder_stops_updating");
    ///<summary>Christmas lights off at 00:30</summary>
    public AutomationEntity ChristmasLightsOffAt0030 => new(_haContext, "automation.christmas_lights_off_at_00_30");
    ///<summary>Christmas lights on at sunset</summary>
    public AutomationEntity ChristmasLightsOnAtSunset => new(_haContext, "automation.christmas_lights_on_at_sunset");
    ///<summary>Close curtains at sunset</summary>
    public AutomationEntity CloseCurtainsAtSunset => new(_haContext, "automation.close_curtains_at_sunset");
    ///<summary>Fetch today&apos;s tide data</summary>
    public AutomationEntity FetchTodaySTideData => new(_haContext, "automation.fetch_today_s_tide_data");
    ///<summary>Lights on at sunset</summary>
    public AutomationEntity LightsOnAtSunset => new(_haContext, "automation.lights_on_at_sunset");
    ///<summary>Low battery level detection &amp; notification for all battery sensors</summary>
    public AutomationEntity LowBatteryLevelDetectionNotificationForAllBatterySensors => new(_haContext, "automation.low_battery_level_detection_notification_for_all_battery_sensors");
    ///<summary>Notify on stale backups</summary>
    public AutomationEntity NotifyOnStaleBackups => new(_haContext, "automation.notify_on_stale_backups");
    ///<summary>Open curtains in mornimg</summary>
    public AutomationEntity OpenCurtainsInMornimg => new(_haContext, "automation.open_curtains_in_mornimg");
    ///<summary>Set frost sensor</summary>
    public AutomationEntity SetFrostSensor => new(_haContext, "automation.set_frost_sensor");
    ///<summary>Turn off lights at midnight</summary>
    public AutomationEntity TurnOffLightsAtMidnight => new(_haContext, "automation.turn_off_lights_at_midnight");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Curtain 3 29A1 Calibration</summary>
    public BinarySensorEntity Curtain329a1Calibration => new(_haContext, "binary_sensor.curtain_3_29a1_calibration");
    ///<summary>Curtain 3 8608 Calibration</summary>
    public BinarySensorEntity Curtain38608Calibration => new(_haContext, "binary_sensor.curtain_3_8608_calibration");
    ///<summary>Device admin</summary>
    public BinarySensorEntity FireTabletDeviceAdmin => new(_haContext, "binary_sensor.fire_tablet_device_admin");
    ///<summary>Kiosk mode</summary>
    public BinarySensorEntity FireTabletKioskMode => new(_haContext, "binary_sensor.fire_tablet_kiosk_mode");
    ///<summary>Plugged in</summary>
    public BinarySensorEntity FireTabletPluggedIn => new(_haContext, "binary_sensor.fire_tablet_plugged_in");
    ///<summary>Door</summary>
    public BinarySensorEntity FrontDoorDoor => new(_haContext, "binary_sensor.front_door_door");
    ///<summary>Front door Motion</summary>
    public BinarySensorEntity FrontDoorMotion => new(_haContext, "binary_sensor.front_door_motion");
    ///<summary>Front Door Door</summary>
    public BinarySensorEntity FrontDoorOpen => new(_haContext, "binary_sensor.front_door_open");
    ///<summary>Frost forecast</summary>
    public BinarySensorEntity FrostForecast => new(_haContext, "binary_sensor.frost_forecast");
    ///<summary>Hive Hub Status</summary>
    public BinarySensorEntity HiveHubStatus => new(_haContext, "binary_sensor.hive_hub_status");
    ///<summary>Jo&apos;s iPhone Focus</summary>
    public BinarySensorEntity JoSIphoneFocus => new(_haContext, "binary_sensor.jo_s_iphone_focus");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Scott&apos;s 14 Focus</summary>
    public BinarySensorEntity ScottS14Focus => new(_haContext, "binary_sensor.scott_s_14_focus");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bring to foreground</summary>
    public ButtonEntity FireTabletBringToForeground => new(_haContext, "button.fire_tablet_bring_to_foreground");
    ///<summary>Load start URL</summary>
    public ButtonEntity FireTabletLoadStartUrl => new(_haContext, "button.fire_tablet_load_start_url");
    ///<summary>Restart browser</summary>
    public ButtonEntity FireTabletRestartBrowser => new(_haContext, "button.fire_tablet_restart_browser");
    ///<summary>Restart device</summary>
    public ButtonEntity FireTabletRestartDevice => new(_haContext, "button.fire_tablet_restart_device");
    ///<summary>Send to background</summary>
    public ButtonEntity FireTabletSendToBackground => new(_haContext, "button.fire_tablet_send_to_background");
    ///<summary>Front Door Wake</summary>
    public ButtonEntity FrontDoorWake => new(_haContext, "button.front_door_wake");
    ///<summary>LG webOS TV BA72 Identify</summary>
    public ButtonEntity LgWebosTvBa72Identify => new(_haContext, "button.lg_webos_tv_ba72_identify");
    ///<summary>LUMI lumi.sensor_cube Identify</summary>
    public ButtonEntity LumiLumiSensorCubeIdentify => new(_haContext, "button.lumi_lumi_sensor_cube_identify");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jo</summary>
    public CalendarEntity Jo => new(_haContext, "calendar.jo");
    ///<summary>Scott</summary>
    public CalendarEntity Scott => new(_haContext, "calendar.scott");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Kitchen kiosk camera</summary>
    public CameraEntity _1921688107 => new(_haContext, "camera.192_168_8_107");
    ///<summary>Front door</summary>
    public CameraEntity FrontDoorSub => new(_haContext, "camera.front_door_sub");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Thermostat</summary>
    public ClimateEntity Thermostat => new(_haContext, "climate.thermostat");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Curtain left</summary>
    public CoverEntity Curtain329a1 => new(_haContext, "cover.curtain_3_29a1");
    ///<summary>Curtains</summary>
    public CoverEntity Curtain38608 => new(_haContext, "cover.curtain_3_8608");
    ///<summary>Blinds</summary>
    public CoverEntity ScottOffice => new(_haContext, "cover.scott_office");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public DeviceTrackerEntity Care57ad => new(_haContext, "device_tracker.care_57ad");
    public DeviceTrackerEntity Care6ce9 => new(_haContext, "device_tracker.care_6ce9");
    public DeviceTrackerEntity Cm7e9c => new(_haContext, "device_tracker.cm_7e9c");
    public DeviceTrackerEntity Dp20Tovjx031339Be3d => new(_haContext, "device_tracker.dp_2_0_tovjx031339_be3d");
    public DeviceTrackerEntity Dp20Tovjx52748469aa => new(_haContext, "device_tracker.dp_2_0_tovjx527484_69aa");
    ///<summary>Jo&apos;s iPhone</summary>
    public DeviceTrackerEntity JoPhone => new(_haContext, "device_tracker.jo_phone");
    ///<summary>Jo&apos;s iPad Air</summary>
    public DeviceTrackerEntity JoSIpadAir => new(_haContext, "device_tracker.jo_s_ipad_air");
    ///<summary>jo_s_iphone</summary>
    public DeviceTrackerEntity JoSIphone => new(_haContext, "device_tracker.jo_s_iphone");
    ///<summary>Jo&apos;s older ipad</summary>
    public DeviceTrackerEntity JoSOlderIpad => new(_haContext, "device_tracker.jo_s_older_ipad");
    ///<summary>Scott&apos;s 14</summary>
    public DeviceTrackerEntity ScottPhone => new(_haContext, "device_tracker.scott_phone");
    ///<summary>Scott&apos;s 14</summary>
    public DeviceTrackerEntity ScottS14 => new(_haContext, "device_tracker.scott_s_14");
    ///<summary>Theo&apos;s iPhone</summary>
    public DeviceTrackerEntity TheoPhone => new(_haContext, "device_tracker.theo_phone");
    ///<summary>Theo iPhone</summary>
    public DeviceTrackerEntity TheosIphone6s => new(_haContext, "device_tracker.theos_iphone_6s");
    public DeviceTrackerEntity Xy4769d => new(_haContext, "device_tracker.xy4_769d");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>kitchen dimmer front Button 1</summary>
    public EventEntity KitchenDimmerFrontButton1 => new(_haContext, "event.kitchen_dimmer_front_button_1");
    ///<summary>kitchen dimmer front Button 2</summary>
    public EventEntity KitchenDimmerFrontButton2 => new(_haContext, "event.kitchen_dimmer_front_button_2");
    ///<summary>kitchen dimmer front Button 3</summary>
    public EventEntity KitchenDimmerFrontButton3 => new(_haContext, "event.kitchen_dimmer_front_button_3");
    ///<summary>kitchen dimmer front Button 4</summary>
    public EventEntity KitchenDimmerFrontButton4 => new(_haContext, "event.kitchen_dimmer_front_button_4");
    ///<summary>kitchen dimmer rear Button 1</summary>
    public EventEntity KitchenDimmerRearButton1 => new(_haContext, "event.kitchen_dimmer_rear_button_1");
    ///<summary>kitchen dimmer rear Button 2</summary>
    public EventEntity KitchenDimmerRearButton2 => new(_haContext, "event.kitchen_dimmer_rear_button_2");
    ///<summary>kitchen dimmer rear Button 3</summary>
    public EventEntity KitchenDimmerRearButton3 => new(_haContext, "event.kitchen_dimmer_rear_button_3");
    ///<summary>kitchen dimmer rear Button 4</summary>
    public EventEntity KitchenDimmerRearButton4 => new(_haContext, "event.kitchen_dimmer_rear_button_4");
    ///<summary>Parents switch Button 1</summary>
    public EventEntity ParentsSwitchButton1 => new(_haContext, "event.parents_switch_button_1");
    ///<summary>Parents switch Button 2</summary>
    public EventEntity ParentsSwitchButton2 => new(_haContext, "event.parents_switch_button_2");
    ///<summary>Parents switch Button 3</summary>
    public EventEntity ParentsSwitchButton3 => new(_haContext, "event.parents_switch_button_3");
    ///<summary>Parents switch Button 4</summary>
    public EventEntity ParentsSwitchButton4 => new(_haContext, "event.parents_switch_button_4");
    ///<summary>sun room dimmer switch Button 1</summary>
    public EventEntity SunRoomDimmerSwitchButton1 => new(_haContext, "event.sun_room_dimmer_switch_button_1");
    ///<summary>sun room dimmer switch Button 2</summary>
    public EventEntity SunRoomDimmerSwitchButton2 => new(_haContext, "event.sun_room_dimmer_switch_button_2");
    ///<summary>sun room dimmer switch Button 3</summary>
    public EventEntity SunRoomDimmerSwitchButton3 => new(_haContext, "event.sun_room_dimmer_switch_button_3");
    ///<summary>sun room dimmer switch Button 4</summary>
    public EventEntity SunRoomDimmerSwitchButton4 => new(_haContext, "event.sun_room_dimmer_switch_button_4");
    ///<summary>Theo dimmer switch Button 1</summary>
    public EventEntity TheoDimmerSwitchButton1 => new(_haContext, "event.theo_dimmer_switch_button_1");
    ///<summary>Theo dimmer switch Button 2</summary>
    public EventEntity TheoDimmerSwitchButton2 => new(_haContext, "event.theo_dimmer_switch_button_2");
    ///<summary>Theo dimmer switch Button 3</summary>
    public EventEntity TheoDimmerSwitchButton3 => new(_haContext, "event.theo_dimmer_switch_button_3");
    ///<summary>Theo dimmer switch Button 4</summary>
    public EventEntity TheoDimmerSwitchButton4 => new(_haContext, "event.theo_dimmer_switch_button_4");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Family</summary>
    public GroupEntity Family => new(_haContext, "group.family");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>FrostySense</summary>
    public InputBooleanEntity Frostysense => new(_haContext, "input_boolean.frostysense");
    ///<summary>netdaemon_daemonapp_apps_scott_home_ha_services_living_room_lights_service</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeHaServicesLivingRoomLightsService => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_ha_services_living_room_lights_service");
    ///<summary>netdaemon_daemonapp_apps_scott_home_ha_services_mqtt_delete_debug_entities_service</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeHaServicesMqttDeleteDebugEntitiesService => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_ha_services_mqtt_delete_debug_entities_service");
    ///<summary>netdaemon_daemonapp_apps_scott_home_ha_services_set_frost_expected_sensor_service</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeHaServicesSetFrostExpectedSensorService => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_ha_services_set_frost_expected_sensor_service");
    ///<summary>netdaemon_daemonapp_apps_scott_home_ha_services_tides_fetcher_service</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeHaServicesTidesFetcherService => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_ha_services_tides_fetcher_service");
    ///<summary>netdaemon_daemonapp_apps_scott_home_heating_based_on_presence</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeHeatingBasedOnPresence => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_heating_based_on_presence");
    ///<summary>netdaemon_daemonapp_apps_scott_home_office_webcam_lights</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomeOfficeWebcamLights => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_office_webcam_lights");
    ///<summary>netdaemon_daemonapp_apps_scott_home_person_home_updater</summary>
    public InputBooleanEntity NetdaemonDaemonappAppsScottHomePersonHomeUpdater => new(_haContext, "input_boolean.netdaemon_daemonapp_apps_scott_home_person_home_updater");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Front Door</summary>
    public LockEntity FrontDoor => new(_haContext, "lock.front_door");
    ///<summary>Front door lock (bluetooth)</summary>
    public LockEntity FrontDoor2 => new(_haContext, "lock.front_door_2");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Screen brightness</summary>
    public NumberEntity FireTabletScreenBrightness => new(_haContext, "number.fire_tablet_screen_brightness");
    ///<summary>Screen off timer</summary>
    public NumberEntity FireTabletScreenOffTimer => new(_haContext, "number.fire_tablet_screen_off_timer");
    ///<summary>Screensaver brightness</summary>
    public NumberEntity FireTabletScreensaverBrightness => new(_haContext, "number.fire_tablet_screensaver_brightness");
    ///<summary>Screensaver timer</summary>
    public NumberEntity FireTabletScreensaverTimer => new(_haContext, "number.fire_tablet_screensaver_timer");
    ///<summary>Front door Motion sensitivity</summary>
    public NumberEntity FrontDoorMotionSensitivity => new(_haContext, "number.front_door_motion_sensitivity");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jo</summary>
    public PersonEntity Jo => new(_haContext, "person.jo");
    ///<summary>Scott</summary>
    public PersonEntity Scott => new(_haContext, "person.scott");
    ///<summary>Theo</summary>
    public PersonEntity Theo => new(_haContext, "person.theo");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Living room - Dog sleep</summary>
    public SceneEntity DogLights => new(_haContext, "scene.dog_lights");
    ///<summary>Living room - all off</summary>
    public SceneEntity LivingRoomAllOff => new(_haContext, "scene.living_room_all_off");
    ///<summary>Living room - bright</summary>
    public SceneEntity LivingRoomBright2 => new(_haContext, "scene.living_room_bright_2");
    ///<summary>Living room Nightlight</summary>
    public SceneEntity LivingRoomNightlight => new(_haContext, "scene.living_room_nightlight");
    ///<summary>Living room Relax</summary>
    public SceneEntity LivingRoomRelax => new(_haContext, "scene.living_room_relax");
    ///<summary>Parents room Bright</summary>
    public SceneEntity ParentsRoomBright => new(_haContext, "scene.parents_room_bright");
    ///<summary>Parents room Dimmed</summary>
    public SceneEntity ParentsRoomDimmed => new(_haContext, "scene.parents_room_dimmed");
    ///<summary>Parents room Nightlight</summary>
    public SceneEntity ParentsRoomNightlight => new(_haContext, "scene.parents_room_nightlight");
    ///<summary>Theo’s room Arctic aurora</summary>
    public SceneEntity TheosRoomArcticAurora => new(_haContext, "scene.theos_room_arctic_aurora");
    ///<summary>Theo’s room Bright</summary>
    public SceneEntity TheosRoomBright => new(_haContext, "scene.theos_room_bright");
    ///<summary>Theo’s room Concentrate</summary>
    public SceneEntity TheosRoomConcentrate => new(_haContext, "scene.theos_room_concentrate");
    ///<summary>Theo’s room Dimmed</summary>
    public SceneEntity TheosRoomDimmed => new(_haContext, "scene.theos_room_dimmed");
    ///<summary>Theo’s room Energize</summary>
    public SceneEntity TheosRoomEnergize => new(_haContext, "scene.theos_room_energize");
    ///<summary>Theo’s room Nightlight</summary>
    public SceneEntity TheosRoomNightlight => new(_haContext, "scene.theos_room_nightlight");
    ///<summary>Theo’s room Read</summary>
    public SceneEntity TheosRoomRead => new(_haContext, "scene.theos_room_read");
    ///<summary>Theo’s room Relax</summary>
    public SceneEntity TheosRoomRelax => new(_haContext, "scene.theos_room_relax");
    ///<summary>Theo’s room Savanna sunset</summary>
    public SceneEntity TheosRoomSavannaSunset => new(_haContext, "scene.theos_room_savanna_sunset");
    ///<summary>Theo’s room Spring blossom</summary>
    public SceneEntity TheosRoomSpringBlossom => new(_haContext, "scene.theos_room_spring_blossom");
    ///<summary>Theo’s room Tropical twilight</summary>
    public SceneEntity TheosRoomTropicalTwilight => new(_haContext, "scene.theos_room_tropical_twilight");
    ///<summary>Living room - Watching TV</summary>
    public SceneEntity WatchingTv => new(_haContext, "scene.watching_tv");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Front door Day night mode</summary>
    public SelectEntity FrontDoorDayNightMode => new(_haContext, "select.front_door_day_night_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Brother DCP-L2530DW series</summary>
    public SensorEntity BrotherDcpL2530dwSeries => new(_haContext, "sensor.brother_dcp_l2530dw_series");
    ///<summary>DCP-L2530DW Status</summary>
    public SensorEntity DcpL2530dwStatus => new(_haContext, "sensor.dcp_l2530dw_status");
    ///<summary>Current page</summary>
    public SensorEntity FireTabletCurrentPage => new(_haContext, "sensor.fire_tablet_current_page");
    ///<summary>Foreground app</summary>
    public SensorEntity FireTabletForegroundApp => new(_haContext, "sensor.fire_tablet_foreground_app");
    ///<summary>Screen orientation</summary>
    public SensorEntity FireTabletScreenOrientation => new(_haContext, "sensor.fire_tablet_screen_orientation");
    ///<summary>Front door lock operator</summary>
    public SensorEntity FrontDoorOperator => new(_haContext, "sensor.front_door_operator");
    ///<summary>Home occupancy</summary>
    public SensorEntity HomeOccupancy => new(_haContext, "sensor.home_occupancy");
    ///<summary>Jo&apos;s iPhone Activity</summary>
    public SensorEntity JoSIphoneActivity => new(_haContext, "sensor.jo_s_iphone_activity");
    ///<summary>Jo&apos;s iPhone Battery State</summary>
    public SensorEntity JoSIphoneBatteryState => new(_haContext, "sensor.jo_s_iphone_battery_state");
    ///<summary>Jo&apos;s iPhone BSSID</summary>
    public SensorEntity JoSIphoneBssid => new(_haContext, "sensor.jo_s_iphone_bssid");
    ///<summary>Jo&apos;s iPhone Connection Type</summary>
    public SensorEntity JoSIphoneConnectionType => new(_haContext, "sensor.jo_s_iphone_connection_type");
    ///<summary>Jo&apos;s iPhone Geocoded Location</summary>
    public SensorEntity JoSIphoneGeocodedLocation => new(_haContext, "sensor.jo_s_iphone_geocoded_location");
    ///<summary>Jo&apos;s iPhone Last Update Trigger</summary>
    public SensorEntity JoSIphoneLastUpdateTrigger => new(_haContext, "sensor.jo_s_iphone_last_update_trigger");
    ///<summary>Jo&apos;s iPhone SIM 1</summary>
    public SensorEntity JoSIphoneSim1 => new(_haContext, "sensor.jo_s_iphone_sim_1");
    ///<summary>Jo&apos;s iPhone SIM 2</summary>
    public SensorEntity JoSIphoneSim2 => new(_haContext, "sensor.jo_s_iphone_sim_2");
    ///<summary>Jo&apos;s iPhone SSID</summary>
    public SensorEntity JoSIphoneSsid => new(_haContext, "sensor.jo_s_iphone_ssid");
    ///<summary>Leith Tides</summary>
    public SensorEntity LeithTides => new(_haContext, "sensor.leith_tides");
    ///<summary>Met Office Queensferry (Edinburgh) Weather 3-hourly</summary>
    public SensorEntity QueensferryEdinburghWeather3Hourly => new(_haContext, "sensor.queensferry_edinburgh_weather_3_hourly");
    ///<summary>Scott&apos;s 14 Activity</summary>
    public SensorEntity ScottS14Activity => new(_haContext, "sensor.scott_s_14_activity");
    ///<summary>Scott&apos;s 14 Battery State</summary>
    public SensorEntity ScottS14BatteryState => new(_haContext, "sensor.scott_s_14_battery_state");
    ///<summary>Scott&apos;s 14 BSSID</summary>
    public SensorEntity ScottS14Bssid => new(_haContext, "sensor.scott_s_14_bssid");
    ///<summary>Scott&apos;s 14 Connection Type</summary>
    public SensorEntity ScottS14ConnectionType => new(_haContext, "sensor.scott_s_14_connection_type");
    ///<summary>Scott&apos;s 14 Geocoded Location</summary>
    public SensorEntity ScottS14GeocodedLocation => new(_haContext, "sensor.scott_s_14_geocoded_location");
    ///<summary>Scott&apos;s 14 Last Update Trigger</summary>
    public SensorEntity ScottS14LastUpdateTrigger => new(_haContext, "sensor.scott_s_14_last_update_trigger");
    ///<summary>Scott&apos;s 14 SIM 1</summary>
    public SensorEntity ScottS14Sim1 => new(_haContext, "sensor.scott_s_14_sim_1");
    ///<summary>Scott&apos;s 14 SIM 2</summary>
    public SensorEntity ScottS14Sim2 => new(_haContext, "sensor.scott_s_14_sim_2");
    ///<summary>Scott&apos;s 14 SSID</summary>
    public SensorEntity ScottS14Ssid => new(_haContext, "sensor.scott_s_14_ssid");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Theo’s iPhone 6S Activity</summary>
    public SensorEntity TheosIphone6sActivity => new(_haContext, "sensor.theos_iphone_6s_activity");
    ///<summary>Theo’s iPhone 6S Battery State</summary>
    public SensorEntity TheosIphone6sBatteryState => new(_haContext, "sensor.theos_iphone_6s_battery_state");
    ///<summary>Theo’s iPhone 6S BSSID</summary>
    public SensorEntity TheosIphone6sBssid => new(_haContext, "sensor.theos_iphone_6s_bssid");
    ///<summary>Theo’s iPhone 6S Connection Type</summary>
    public SensorEntity TheosIphone6sConnectionType => new(_haContext, "sensor.theos_iphone_6s_connection_type");
    ///<summary>Theo’s iPhone 6S Geocoded Location</summary>
    public SensorEntity TheosIphone6sGeocodedLocation => new(_haContext, "sensor.theos_iphone_6s_geocoded_location");
    ///<summary>Theo’s iPhone 6S Last Update Trigger</summary>
    public SensorEntity TheosIphone6sLastUpdateTrigger => new(_haContext, "sensor.theos_iphone_6s_last_update_trigger");
    ///<summary>Theo’s iPhone 6S SIM 1</summary>
    public SensorEntity TheosIphone6sSim1 => new(_haContext, "sensor.theos_iphone_6s_sim_1");
    ///<summary>Theo’s iPhone 6S SSID</summary>
    public SensorEntity TheosIphone6sSsid => new(_haContext, "sensor.theos_iphone_6s_ssid");
    ///<summary>WishList CI Status</summary>
    public SensorEntity WishlistCiStatus => new(_haContext, "sensor.wishlist_ci_status");
    ///<summary>Z‐Stick Gen5 USB Controller Status</summary>
    public SensorEntity ZStickGen5UsbControllerStatus => new(_haContext, "sensor.z_stick_gen5_usb_controller_status");
    ///<summary>Brother DCP-L2530DW series BK</summary>
    public NumericSensorEntity BrotherDcpL2530dwSeriesBk => new(_haContext, "sensor.brother_dcp_l2530dw_series_bk");
    ///<summary>Camera FTP</summary>
    public NumericSensorEntity CameraFtp => new(_haContext, "sensor.camera_ftp");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity Care6ce9EstimatedDistance => new(_haContext, "sensor.care_6ce9_estimated_distance");
    ///<summary>CPU Speed</summary>
    public NumericSensorEntity CpuSpeed => new(_haContext, "sensor.cpu_speed");
    ///<summary>CPU Temperature</summary>
    public NumericSensorEntity CpuTemperature => new(_haContext, "sensor.cpu_temperature");
    ///<summary>Curtain 3 29A1 Battery</summary>
    public NumericSensorEntity Curtain329a1Battery => new(_haContext, "sensor.curtain_3_29a1_battery");
    ///<summary>Curtain 3 29A1 Light level</summary>
    public NumericSensorEntity Curtain329a1LightLevel => new(_haContext, "sensor.curtain_3_29a1_light_level");
    ///<summary>Curtain 3 8608 Battery</summary>
    public NumericSensorEntity Curtain38608Battery => new(_haContext, "sensor.curtain_3_8608_battery");
    ///<summary>Curtain 3 8608 Light level</summary>
    public NumericSensorEntity Curtain38608LightLevel => new(_haContext, "sensor.curtain_3_8608_light_level");
    ///<summary>DCP-L2530DW Black toner remaining</summary>
    public NumericSensorEntity DcpL2530dwBlackTonerRemaining => new(_haContext, "sensor.dcp_l2530dw_black_toner_remaining");
    ///<summary>DCP-L2530DW Drum page counter</summary>
    public NumericSensorEntity DcpL2530dwDrumPageCounter => new(_haContext, "sensor.dcp_l2530dw_drum_page_counter");
    ///<summary>DCP-L2530DW Drum remaining lifetime</summary>
    public NumericSensorEntity DcpL2530dwDrumRemainingLifetime => new(_haContext, "sensor.dcp_l2530dw_drum_remaining_lifetime");
    ///<summary>DCP-L2530DW Drum remaining pages</summary>
    public NumericSensorEntity DcpL2530dwDrumRemainingPages => new(_haContext, "sensor.dcp_l2530dw_drum_remaining_pages");
    ///<summary>DCP-L2530DW Duplex unit page counter</summary>
    public NumericSensorEntity DcpL2530dwDuplexUnitPageCounter => new(_haContext, "sensor.dcp_l2530dw_duplex_unit_page_counter");
    ///<summary>DCP-L2530DW Page counter</summary>
    public NumericSensorEntity DcpL2530dwPageCounter => new(_haContext, "sensor.dcp_l2530dw_page_counter");
    ///<summary>Battery</summary>
    public NumericSensorEntity FireTabletBattery => new(_haContext, "sensor.fire_tablet_battery");
    ///<summary>Free memory</summary>
    public NumericSensorEntity FireTabletFreeMemory => new(_haContext, "sensor.fire_tablet_free_memory");
    ///<summary>Internal storage free space</summary>
    public NumericSensorEntity FireTabletInternalStorageFreeSpace => new(_haContext, "sensor.fire_tablet_internal_storage_free_space");
    ///<summary>Internal storage total space</summary>
    public NumericSensorEntity FireTabletInternalStorageTotalSpace => new(_haContext, "sensor.fire_tablet_internal_storage_total_space");
    ///<summary>Total memory</summary>
    public NumericSensorEntity FireTabletTotalMemory => new(_haContext, "sensor.fire_tablet_total_memory");
    ///<summary>Front Door Battery</summary>
    public NumericSensorEntity FrontDoorBattery2 => new(_haContext, "sensor.front_door_battery_2");
    ///<summary>Battery</summary>
    public NumericSensorEntity FrontDoorBatteryLevel => new(_haContext, "sensor.front_door_battery_level");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>kitchen dimmer rear Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery => new(_haContext, "sensor.hue_dimmer_switch_1_battery");
    ///<summary>kitchen dimmer front Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery2 => new(_haContext, "sensor.hue_dimmer_switch_1_battery_2");
    ///<summary>sun room dimmer switch Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery3 => new(_haContext, "sensor.hue_dimmer_switch_1_battery_3");
    ///<summary>iPhone Battery</summary>
    public NumericSensorEntity IphoneBattery => new(_haContext, "sensor.iphone_battery");
    ///<summary>Jo&apos;s iPad Air Battery</summary>
    public NumericSensorEntity JoSIpadAirBattery => new(_haContext, "sensor.jo_s_ipad_air_battery");
    ///<summary>Jo&apos;s iPhone Average Active Pace</summary>
    public NumericSensorEntity JoSIphoneAverageActivePace => new(_haContext, "sensor.jo_s_iphone_average_active_pace");
    ///<summary>Jo&apos;s iPhone Battery</summary>
    public NumericSensorEntity JoSIphoneBattery => new(_haContext, "sensor.jo_s_iphone_battery");
    ///<summary>Jo&apos;s iPhone Battery Level</summary>
    public NumericSensorEntity JoSIphoneBatteryLevel => new(_haContext, "sensor.jo_s_iphone_battery_level");
    ///<summary>Jo&apos;s iPhone Distance</summary>
    public NumericSensorEntity JoSIphoneDistance => new(_haContext, "sensor.jo_s_iphone_distance");
    ///<summary>Jo&apos;s iPhone Floors Ascended</summary>
    public NumericSensorEntity JoSIphoneFloorsAscended => new(_haContext, "sensor.jo_s_iphone_floors_ascended");
    ///<summary>Jo&apos;s iPhone Floors Descended</summary>
    public NumericSensorEntity JoSIphoneFloorsDescended => new(_haContext, "sensor.jo_s_iphone_floors_descended");
    ///<summary>Jo&apos;s iPhone Steps</summary>
    public NumericSensorEntity JoSIphoneSteps => new(_haContext, "sensor.jo_s_iphone_steps");
    ///<summary>Jo&apos;s iPhone Storage</summary>
    public NumericSensorEntity JoSIphoneStorage => new(_haContext, "sensor.jo_s_iphone_storage");
    ///<summary>Jo&apos;s older ipad Battery</summary>
    public NumericSensorEntity JoSOlderIpadBattery => new(_haContext, "sensor.jo_s_older_ipad_battery");
    ///<summary>LUMI lumi.sensor_cube Battery</summary>
    public NumericSensorEntity LumiLumiSensorCubeBattery => new(_haContext, "sensor.lumi_lumi_sensor_cube_battery");
    ///<summary>Parents switch Battery</summary>
    public NumericSensorEntity ParentsSwitchBatteryLevel => new(_haContext, "sensor.parents_switch_battery_level");
    ///<summary>Plusnet Hub Two Download speed</summary>
    public NumericSensorEntity PlusnetHubTwoDownloadSpeed => new(_haContext, "sensor.plusnet_hub_two_download_speed");
    ///<summary>Plusnet Hub Two Upload speed</summary>
    public NumericSensorEntity PlusnetHubTwoUploadSpeed => new(_haContext, "sensor.plusnet_hub_two_upload_speed");
    ///<summary>Met Office Queensferry (Edinburgh) Probability of precipitation 3-hourly</summary>
    public NumericSensorEntity QueensferryEdinburghProbabilityOfPrecipitation3Hourly => new(_haContext, "sensor.queensferry_edinburgh_probability_of_precipitation_3_hourly");
    ///<summary>Met Office Queensferry (Edinburgh) Temperature 3-hourly</summary>
    public NumericSensorEntity QueensferryEdinburghTemperature3Hourly => new(_haContext, "sensor.queensferry_edinburgh_temperature_3_hourly");
    ///<summary>Met Office Queensferry (Edinburgh) UV index 3-hourly</summary>
    public NumericSensorEntity QueensferryEdinburghUvIndex3Hourly => new(_haContext, "sensor.queensferry_edinburgh_uv_index_3_hourly");
    ///<summary>Met Office Queensferry (Edinburgh) Wind speed 3-hourly</summary>
    public NumericSensorEntity QueensferryEdinburghWindSpeed3Hourly => new(_haContext, "sensor.queensferry_edinburgh_wind_speed_3_hourly");
    ///<summary>Blinds battery level</summary>
    public NumericSensorEntity ScottOfficeBatteryLevel => new(_haContext, "sensor.scott_office_battery_level");
    ///<summary>Scott&apos;s 14 Average Active Pace</summary>
    public NumericSensorEntity ScottS14AverageActivePace => new(_haContext, "sensor.scott_s_14_average_active_pace");
    ///<summary>Scott&apos;s 14 Battery</summary>
    public NumericSensorEntity ScottS14Battery => new(_haContext, "sensor.scott_s_14_battery");
    ///<summary>Scott&apos;s 14 Battery Level</summary>
    public NumericSensorEntity ScottS14BatteryLevel => new(_haContext, "sensor.scott_s_14_battery_level");
    ///<summary>Scott&apos;s 14 Distance</summary>
    public NumericSensorEntity ScottS14Distance => new(_haContext, "sensor.scott_s_14_distance");
    ///<summary>Scott&apos;s 14 Floors Ascended</summary>
    public NumericSensorEntity ScottS14FloorsAscended => new(_haContext, "sensor.scott_s_14_floors_ascended");
    ///<summary>Scott&apos;s 14 Floors Descended</summary>
    public NumericSensorEntity ScottS14FloorsDescended => new(_haContext, "sensor.scott_s_14_floors_descended");
    ///<summary>Scott&apos;s 14 Steps</summary>
    public NumericSensorEntity ScottS14Steps => new(_haContext, "sensor.scott_s_14_steps");
    ///<summary>Scott&apos;s 14 Storage</summary>
    public NumericSensorEntity ScottS14Storage => new(_haContext, "sensor.scott_s_14_storage");
    ///<summary>Theo dimmer switch Battery</summary>
    public NumericSensorEntity TheoDimmerSwitchBatteryLevel => new(_haContext, "sensor.theo_dimmer_switch_battery_level");
    ///<summary>Theo’s iPhone 6S Average Active Pace</summary>
    public NumericSensorEntity TheosIphone6sAverageActivePace => new(_haContext, "sensor.theos_iphone_6s_average_active_pace");
    ///<summary>Theo’s iPhone 6S Battery Level</summary>
    public NumericSensorEntity TheosIphone6sBatteryLevel => new(_haContext, "sensor.theos_iphone_6s_battery_level");
    ///<summary>Theo’s iPhone 6S Distance</summary>
    public NumericSensorEntity TheosIphone6sDistance => new(_haContext, "sensor.theos_iphone_6s_distance");
    ///<summary>Theo’s iPhone 6S Floors Ascended</summary>
    public NumericSensorEntity TheosIphone6sFloorsAscended => new(_haContext, "sensor.theos_iphone_6s_floors_ascended");
    ///<summary>Theo’s iPhone 6S Floors Descended</summary>
    public NumericSensorEntity TheosIphone6sFloorsDescended => new(_haContext, "sensor.theos_iphone_6s_floors_descended");
    ///<summary>Theo’s iPhone 6S Steps</summary>
    public NumericSensorEntity TheosIphone6sSteps => new(_haContext, "sensor.theos_iphone_6s_steps");
    ///<summary>Theo’s iPhone 6S Storage</summary>
    public NumericSensorEntity TheosIphone6sStorage => new(_haContext, "sensor.theos_iphone_6s_storage");
    ///<summary>Thermostat Battery Level</summary>
    public NumericSensorEntity ThermostatBatteryLevel => new(_haContext, "sensor.thermostat_battery_level");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Automation: Lights On At Sunset</summary>
    public SwitchEntity AutomationLightsOnAtSunset => new(_haContext, "switch.automation_lights_on_at_sunset");
    ///<summary>Automation: None</summary>
    public SwitchEntity AutomationNone => new(_haContext, "switch.automation_none");
    ///<summary>Kiosk lock</summary>
    public SwitchEntity FireTabletKioskLock => new(_haContext, "switch.fire_tablet_kiosk_lock");
    ///<summary>Maintenance mode</summary>
    public SwitchEntity FireTabletMaintenanceMode => new(_haContext, "switch.fire_tablet_maintenance_mode");
    ///<summary>Motion detection</summary>
    public SwitchEntity FireTabletMotionDetection => new(_haContext, "switch.fire_tablet_motion_detection");
    ///<summary>Screen</summary>
    public SwitchEntity FireTabletScreen => new(_haContext, "switch.fire_tablet_screen");
    ///<summary>Screensaver</summary>
    public SwitchEntity FireTabletScreensaver => new(_haContext, "switch.fire_tablet_screensaver");
    ///<summary>Front door Email on event</summary>
    public SwitchEntity FrontDoorEmailOnEvent => new(_haContext, "switch.front_door_email_on_event");
    ///<summary>Front door FTP upload</summary>
    public SwitchEntity FrontDoorFtpUpload => new(_haContext, "switch.front_door_ftp_upload");
    ///<summary>Front door Push notifications</summary>
    public SwitchEntity FrontDoorPushNotifications => new(_haContext, "switch.front_door_push_notifications");
    ///<summary>Front door Record</summary>
    public SwitchEntity FrontDoorRecord => new(_haContext, "switch.front_door_record");
    ///<summary>Front door Record audio</summary>
    public SwitchEntity FrontDoorRecordAudio => new(_haContext, "switch.front_door_record_audio");
    ///<summary>LG webOS TV BA72 Mute</summary>
    public SwitchEntity LgWebosTvBa72Mute => new(_haContext, "switch.lg_webos_tv_ba72_mute");
    ///<summary>On air lamp Socket 1</summary>
    public SwitchEntity OnAirLampSocket1 => new(_haContext, "switch.on_air_lamp_socket_1");
    ///<summary>scott_office_webcam</summary>
    public SwitchEntity ScottOfficeWebcam => new(_haContext, "switch.scott_office_webcam");
    ///<summary>Christmas</summary>
    public SwitchEntity SmartPlug2Socket1 => new(_haContext, "switch.smart_plug_2_socket_1");
    ///<summary>Studio Light Socket 1</summary>
    public SwitchEntity StudioLightSocket1 => new(_haContext, "switch.studio_light_socket_1");
    ///<summary>Thermostat Heat on Demand</summary>
    public SwitchEntity ThermostatHeatOnDemand => new(_haContext, "switch.thermostat_heat_on_demand");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Front door Firmware</summary>
    public UpdateEntity FrontDoorFirmware => new(_haContext, "update.front_door_firmware");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>MariaDB Update</summary>
    public UpdateEntity MariadbUpdate => new(_haContext, "update.mariadb_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Advanced SSH &amp; Web Terminal Update</summary>
    public UpdateEntity SshWebTerminalUpdate => new(_haContext, "update.ssh_web_terminal_update");
    ///<summary>Z-Wave JS Update</summary>
    public UpdateEntity ZWaveJsUpdate => new(_haContext, "update.z_wave_js_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Met Office Queensferry (Edinburgh) 3-Hourly</summary>
    public WeatherEntity MetOfficeQueensferryEdinburgh3Hourly => new(_haContext, "weather.met_office_queensferry_edinburgh_3_hourly");
    ///<summary>Met Office Queensferry (Edinburgh) Daily</summary>
    public WeatherEntity MetOfficeQueensferryEdinburghDaily => new(_haContext, "weather.met_office_queensferry_edinburgh_daily");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public object? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("dynamics")]
    public object? Dynamics { get; init; }

    [JsonPropertyName("is_hue_group")]
    public bool? IsHueGroup { get; init; }

    [JsonPropertyName("hue_scenes")]
    public IReadOnlyList<string>? HueScenes { get; init; }

    [JsonPropertyName("hue_type")]
    public string? HueType { get; init; }

    [JsonPropertyName("lights")]
    public IReadOnlyList<string>? Lights { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("last_run_success")]
    public object? LastRunSuccess { get; init; }

    [JsonPropertyName("updated")]
    public string? Updated { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("last_run_success")]
    public bool? LastRunSuccess { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("account_fetch_interval")]
    public double? AccountFetchInterval { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("owner_fullname")]
    public string? OwnerFullname { get; init; }

    [JsonPropertyName("battery_status")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("low_power_mode")]
    public bool? LowPowerMode { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>, IGroupEntityCore
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    [JsonPropertyName("group_type")]
    public string? GroupType { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("is_dynamic")]
    public bool? IsDynamic { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("sensor_id")]
    public string? SensorId { get; init; }

    [JsonPropertyName("site_id")]
    public string? SiteId { get; init; }

    [JsonPropertyName("site_name")]
    public string? SiteName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("method")]
    public string? Method { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public object? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_0 { get; init; }

    [JsonPropertyName("location")]
    public string? Location_1 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("build_status")]
    public string? BuildStatus { get; init; }

    [JsonPropertyName("build_started")]
    public string? BuildStarted { get; init; }

    [JsonPropertyName("build_finished")]
    public string? BuildFinished { get; init; }

    [JsonPropertyName("build_duration")]
    public double? BuildDuration { get; init; }

    [JsonPropertyName("commit id")]
    public string? Commitid { get; init; }

    [JsonPropertyName("commit date")]
    public string? Commitdate { get; init; }

    [JsonPropertyName("build id")]
    public double? Buildid { get; init; }

    [JsonPropertyName("build branch")]
    public string? Buildbranch { get; init; }

    [JsonPropertyName("Updated")]
    public string? Updated { get; init; }

    [JsonPropertyName("Dates")]
    public IReadOnlyList<string>? Dates { get; init; }

    [JsonPropertyName("Heights")]
    public IReadOnlyList<double>? Heights { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("sensor_id")]
    public string? SensorId { get; init; }

    [JsonPropertyName("site_id")]
    public string? SiteId { get; init; }

    [JsonPropertyName("site_name")]
    public string? SiteName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("last_run_success")]
    public object? LastRunSuccess { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("arch")]
    public string? Arch { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("ghz_advertised")]
    public double? GhzAdvertised { get; init; }

    [JsonPropertyName("account_fetch_interval")]
    public double? AccountFetchInterval { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("owner_fullname")]
    public string? OwnerFullname { get; init; }

    [JsonPropertyName("battery_status")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("low_power_mode")]
    public bool? LowPowerMode { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public string? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    CommandLineServices CommandLine { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    FullyKioskServices FullyKiosk { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HiveServices Hive { get; }

    HomeassistantServices Homeassistant { get; }

    HueServices Hue { get; }

    HumidifierServices Humidifier { get; }

    IcloudServices Icloud { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    WebostvServices Webostv { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }

    ZwaveJsServices ZwaveJs { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public CommandLineServices CommandLine => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public FullyKioskServices FullyKiosk => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HiveServices Hive => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HueServices Hue => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public IcloudServices Icloud => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
    public ZwaveJsServices ZwaveJs => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class CommandLineServices
{
    private readonly IHaContext _haContext;
    public CommandLineServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads command line configuration from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("command_line", "reload", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    public void Process(string text, string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class FullyKioskServices
{
    private readonly IHaContext _haContext;
    public FullyKioskServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Loads a URL on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void LoadUrl(ServiceTarget target, FullyKioskLoadUrlParameters data)
    {
        _haContext.CallService("fully_kiosk", "load_url", target, data);
    }

    ///<summary>Loads a URL on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="url">URL to load. eg: https://home-assistant.io</param>
    public void LoadUrl(ServiceTarget target, string url)
    {
        _haContext.CallService("fully_kiosk", "load_url", target, new FullyKioskLoadUrlParameters { Url = url });
    }

    ///<summary>Sets a configuration parameter on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetConfig(ServiceTarget target, FullyKioskSetConfigParameters data)
    {
        _haContext.CallService("fully_kiosk", "set_config", target, data);
    }

    ///<summary>Sets a configuration parameter on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="key">Configuration parameter to set. eg: motionSensitivity</param>
    ///<param name="value">Value for the configuration parameter. eg: 90</param>
    public void SetConfig(ServiceTarget target, string key, string value)
    {
        _haContext.CallService("fully_kiosk", "set_config", target, new FullyKioskSetConfigParameters { Key = key, Value = value });
    }

    ///<summary>Starts an application on the device running Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartApplication(ServiceTarget target, FullyKioskStartApplicationParameters data)
    {
        _haContext.CallService("fully_kiosk", "start_application", target, data);
    }

    ///<summary>Starts an application on the device running Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="application">Package name of the application to start. eg: de.ozerov.fully</param>
    public void StartApplication(ServiceTarget target, string application)
    {
        _haContext.CallService("fully_kiosk", "start_application", target, new FullyKioskStartApplicationParameters { Application = application });
    }
}

public partial record FullyKioskLoadUrlParameters
{
    ///<summary>URL to load. eg: https://home-assistant.io</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record FullyKioskSetConfigParameters
{
    ///<summary>Configuration parameter to set. eg: motionSensitivity</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value for the configuration parameter. eg: 90</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record FullyKioskStartApplicationParameters
{
    ///<summary>Package name of the application to start. eg: de.ozerov.fully</summary>
    [JsonPropertyName("application")]
    public string? Application { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HiveServices
{
    private readonly IHaContext _haContext;
    public HiveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the boost mode OFF.</summary>
    public void BoostHeatingOff(HiveBoostHeatingOffParameters data)
    {
        _haContext.CallService("hive", "boost_heating_off", null, data);
    }

    ///<summary>Sets the boost mode OFF.</summary>
    ///<param name="entityId">Select entity_id to turn boost off.</param>
    public void BoostHeatingOff(string entityId)
    {
        _haContext.CallService("hive", "boost_heating_off", null, new HiveBoostHeatingOffParameters { EntityId = entityId });
    }

    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    ///<param name="target">The target for this service call</param>
    public void BoostHeatingOn(ServiceTarget target, HiveBoostHeatingOnParameters data)
    {
        _haContext.CallService("hive", "boost_heating_on", target, data);
    }

    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="timePeriod">Set the time period for the boost. eg: 01:30:00</param>
    ///<param name="temperature">Set the target temperature for the boost period.</param>
    public void BoostHeatingOn(ServiceTarget target, DateTime timePeriod, double? temperature = null)
    {
        _haContext.CallService("hive", "boost_heating_on", target, new HiveBoostHeatingOnParameters { TimePeriod = timePeriod, Temperature = temperature });
    }
}

public partial record HiveBoostHeatingOffParameters
{
    ///<summary>Select entity_id to turn boost off.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record HiveBoostHeatingOnParameters
{
    ///<summary>Set the time period for the boost. eg: 01:30:00</summary>
    [JsonPropertyName("time_period")]
    public DateTime? TimePeriod { get; init; }

    ///<summary>Set the target temperature for the boost period.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial class HueServices
{
    private readonly IHaContext _haContext;
    public HueServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivateScene(ServiceTarget target, HueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "activate_scene", target, data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public void ActivateScene(ServiceTarget target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        _haContext.CallService("hue", "activate_scene", target, new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    public void HueActivateScene(HueHueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, data);
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    ///<param name="groupName">Name of hue group/room from the hue app. eg: Living Room</param>
    ///<param name="sceneName">Name of hue scene from the hue app. eg: Energize</param>
    ///<param name="dynamic">Enable dynamic mode of the scene (V2 bridges and supported scenes only).</param>
    public void HueActivateScene(string? groupName = null, string? sceneName = null, bool? dynamic = null)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, new HueHueActivateSceneParameters { GroupName = groupName, SceneName = sceneName, Dynamic = dynamic });
    }
}

public partial record HueActivateSceneParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Enable dynamic mode of the scene.</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }

    ///<summary>Speed of dynamic palette for this scene.</summary>
    [JsonPropertyName("speed")]
    public long? Speed { get; init; }

    ///<summary>Set brightness for the scene.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record HueHueActivateSceneParameters
{
    ///<summary>Name of hue group/room from the hue app. eg: Living Room</summary>
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    ///<summary>Name of hue scene from the hue app. eg: Energize</summary>
    [JsonPropertyName("scene_name")]
    public string? SceneName { get; init; }

    ///<summary>Enable dynamic mode of the scene (V2 bridges and supported scenes only).</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class IcloudServices
{
    private readonly IHaContext _haContext;
    public IcloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Displays a message on an Apple device.</summary>
    public void DisplayMessage(IcloudDisplayMessageParameters data)
    {
        _haContext.CallService("icloud", "display_message", null, data);
    }

    ///<summary>Displays a message on an Apple device.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to display the message. eg: stevesiphone</param>
    ///<param name="message">The content of your message. eg: Hey Steve !</param>
    ///<param name="sound">To make a sound when displaying the message.</param>
    public void DisplayMessage(string account, string deviceName, string message, bool? sound = null)
    {
        _haContext.CallService("icloud", "display_message", null, new IcloudDisplayMessageParameters { Account = account, DeviceName = deviceName, Message = message, Sound = sound });
    }

    ///<summary>Makes an Apple device in lost state.</summary>
    public void LostDevice(IcloudLostDeviceParameters data)
    {
        _haContext.CallService("icloud", "lost_device", null, data);
    }

    ///<summary>Makes an Apple device in lost state.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to set lost. eg: stevesiphone</param>
    ///<param name="number">The phone number to call in lost mode (must contain country code). eg: +33450020100</param>
    ///<param name="message">The message to display in lost mode. eg: Call me</param>
    public void LostDevice(string account, string deviceName, string number, string message)
    {
        _haContext.CallService("icloud", "lost_device", null, new IcloudLostDeviceParameters { Account = account, DeviceName = deviceName, Number = number, Message = message });
    }

    ///<summary>Plays sound on an Apple device.</summary>
    public void PlaySound(IcloudPlaySoundParameters data)
    {
        _haContext.CallService("icloud", "play_sound", null, data);
    }

    ///<summary>Plays sound on an Apple device.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to play a sound. eg: stevesiphone</param>
    public void PlaySound(string account, string deviceName)
    {
        _haContext.CallService("icloud", "play_sound", null, new IcloudPlaySoundParameters { Account = account, DeviceName = deviceName });
    }

    ///<summary>Updates iCloud devices.</summary>
    public void Update(IcloudUpdateParameters data)
    {
        _haContext.CallService("icloud", "update", null, data);
    }

    ///<summary>Updates iCloud devices.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    public void Update(string account)
    {
        _haContext.CallService("icloud", "update", null, new IcloudUpdateParameters { Account = account });
    }
}

public partial record IcloudDisplayMessageParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to display the message. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>The content of your message. eg: Hey Steve !</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>To make a sound when displaying the message.</summary>
    [JsonPropertyName("sound")]
    public bool? Sound { get; init; }
}

public partial record IcloudLostDeviceParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to set lost. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>The phone number to call in lost mode (must contain country code). eg: +33450020100</summary>
    [JsonPropertyName("number")]
    public string? Number { get; init; }

    ///<summary>The message to display in lost mode. eg: Call me</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record IcloudPlaySoundParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to play a sound. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }
}

public partial record IcloudUpdateParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void CheckForFrost()
    {
        _haContext.CallService("netdaemon", "check_for_frost", null);
    }

    public void DeleteDebugEntities()
    {
        _haContext.CallService("netdaemon", "delete_debug_entities", null);
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    public void GetTidalEvents()
    {
        _haContext.CallService("netdaemon", "get_tidal_events", null);
    }

    public void LivingroomLightsOff()
    {
        _haContext.CallService("netdaemon", "livingroom_lights_off", null);
    }

    public void LivingroomLightsOn()
    {
        _haContext.CallService("netdaemon", "livingroom_lights_on", null);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the lg_webos_tv_oled55a16la service.</summary>
    public void LgWebosTvOled55a16la(NotifyLgWebosTvOled55a16laParameters data)
    {
        _haContext.CallService("notify", "lg_webos_tv_oled55a16la", null, data);
    }

    ///<summary>Sends a notification message using the lg_webos_tv_oled55a16la service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void LgWebosTvOled55a16la(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "lg_webos_tv_oled55a16la", null, new NotifyLgWebosTvOled55a16laParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    public void MobileAppIphone(NotifyMobileAppIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone", null, new NotifyMobileAppIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_jo_s_iphone integration.</summary>
    public void MobileAppJoSIphone(NotifyMobileAppJoSIphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_jo_s_iphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_jo_s_iphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppJoSIphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_jo_s_iphone", null, new NotifyMobileAppJoSIphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_scott_s_14 integration.</summary>
    public void MobileAppScottS14(NotifyMobileAppScottS14Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_scott_s_14", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_scott_s_14 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppScottS14(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_scott_s_14", null, new NotifyMobileAppScottS14Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }
}

public partial record NotifyLgWebosTvOled55a16laParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppJoSIphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppScottS14Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Applys `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Applys `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Starts a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecast(ServiceTarget target, WeatherGetForecastParameters data)
    {
        _haContext.CallService("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecast(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }
}

public partial record WeatherGetForecastParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Sends a button press command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Sends a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webostv entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public partial class ZwaveJsServices
{
    private readonly IHaContext _haContext;
    public ZwaveJsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    ///<param name="target">The target for this service call</param>
    public void BulkSetPartialConfigParameters(ServiceTarget target, ZwaveJsBulkSetPartialConfigParametersParameters data)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", target, data);
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: 9</param>
    ///<param name="value">The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter. eg: &quot;0x1&quot;: 1 &quot;0x10&quot;: 1 &quot;0x20&quot;: 1 &quot;0x40&quot;: 1 </param>
    public void BulkSetPartialConfigParameters(ServiceTarget target, string parameter, object value, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", target, new ZwaveJsBulkSetPartialConfigParametersParameters { Endpoint = endpoint, Parameter = parameter, Value = value });
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` service and require direct calls to the Command Class API.</summary>
    ///<param name="target">The target for this service call</param>
    public void InvokeCcApi(ServiceTarget target, ZwaveJsInvokeCcApiParameters data)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", target, data);
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` service and require direct calls to the Command Class API.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="commandClass">The ID of the command class that you want to issue a command to. eg: 132</param>
    ///<param name="endpoint">The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted. eg: 1</param>
    ///<param name="methodName">The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods. eg: setInterval</param>
    ///<param name="parameters">A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters. eg: [1, 1]</param>
    public void InvokeCcApi(ServiceTarget target, string commandClass, string methodName, object parameters, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", target, new ZwaveJsInvokeCcApiParameters { CommandClass = commandClass, Endpoint = endpoint, MethodName = methodName, Parameters = parameters });
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MulticastSetValue(ServiceTarget target, ZwaveJsMulticastSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", target, data);
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="broadcast">Whether command should be broadcast to all devices on the network. eg: True</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    public void MulticastSetValue(ServiceTarget target, string commandClass, string @property, object value, bool? broadcast = null, string? endpoint = null, string? propertyKey = null, object? options = null)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", target, new ZwaveJsMulticastSetValueParameters { Broadcast = broadcast, CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Options = options, Value = value });
    }

    ///<summary>Forces Z-Wave JS to try to reach a node. This can be used to update the status of the node in Z-Wave JS when you think it doesn&apos;t accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.</summary>
    ///<param name="target">The target for this service call</param>
    public void Ping(ServiceTarget target)
    {
        _haContext.CallService("zwave_js", "ping", target);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    public void RefreshValue(ZwaveJsRefreshValueParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, data);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    ///<param name="entityId">Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </param>
    ///<param name="refreshAllValues">Whether to refresh all values (true) or just the primary value (false).</param>
    public void RefreshValue(IEnumerable<string> entityId, bool? refreshAllValues = null)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, new ZwaveJsRefreshValueParameters { EntityId = entityId, RefreshAllValues = refreshAllValues });
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetMeter(ServiceTarget target, ZwaveJsResetMeterParameters data)
    {
        _haContext.CallService("zwave_js", "reset_meter", target, data);
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public void ResetMeter(ServiceTarget target, string? meterType = null, string? value = null)
    {
        _haContext.CallService("zwave_js", "reset_meter", target, new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetConfigParameter(ServiceTarget target, ZwaveJsSetConfigParameterParameters data)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", target, data);
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: Minimum brightness level</param>
    ///<param name="bitmask">Target a specific bitmask (see the documentation for more information). Cannot be combined with value_size or value_format.</param>
    ///<param name="value">The new value to set for this configuration parameter. eg: 5</param>
    public void SetConfigParameter(ServiceTarget target, string parameter, string value, string? endpoint = null, string? bitmask = null)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", target, new ZwaveJsSetConfigParameterParameters { Endpoint = endpoint, Parameter = parameter, Bitmask = bitmask, Value = value });
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on a Z-Wave device. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, ZwaveJsSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "set_value", target, data);
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on a Z-Wave device. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</param>
    ///<param name="waitForResult">Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the service call can take a while if setting a value on an asleep battery device.</param>
    public void SetValue(ServiceTarget target, string commandClass, string @property, object value, string? endpoint = null, string? propertyKey = null, object? options = null, bool? waitForResult = null)
    {
        _haContext.CallService("zwave_js", "set_value", target, new ZwaveJsSetValueParameters { CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Value = value, Options = options, WaitForResult = waitForResult });
    }
}

public partial record ZwaveJsBulkSetPartialConfigParametersParameters
{
    ///<summary>The configuration parameter&apos;s endpoint. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name (or ID) of the configuration parameter you want to configure. eg: 9</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter. eg: &quot;0x1&quot;: 1 &quot;0x10&quot;: 1 &quot;0x20&quot;: 1 &quot;0x40&quot;: 1 </summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record ZwaveJsInvokeCcApiParameters
{
    ///<summary>The ID of the command class that you want to issue a command to. eg: 132</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods. eg: setInterval</summary>
    [JsonPropertyName("method_name")]
    public string? MethodName { get; init; }

    ///<summary>A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters. eg: [1, 1]</summary>
    [JsonPropertyName("parameters")]
    public object? Parameters { get; init; }
}

public partial record ZwaveJsMulticastSetValueParameters
{
    ///<summary>Whether command should be broadcast to all devices on the network. eg: True</summary>
    [JsonPropertyName("broadcast")]
    public bool? Broadcast { get; init; }

    ///<summary>The ID of the command class for the value. eg: 117</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint for the value. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The ID of the property for the value. eg: currentValue</summary>
    [JsonPropertyName("property")]
    public string? Property { get; init; }

    ///<summary>The ID of the property key for the value. eg: 1</summary>
    [JsonPropertyName("property_key")]
    public string? PropertyKey { get; init; }

    ///<summary>Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The new value to set. eg: ffbb99</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record ZwaveJsRefreshValueParameters
{
    ///<summary>Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>Whether to refresh all values (true) or just the primary value (false).</summary>
    [JsonPropertyName("refresh_all_values")]
    public bool? RefreshAllValues { get; init; }
}

public partial record ZwaveJsResetMeterParameters
{
    ///<summary>The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</summary>
    [JsonPropertyName("meter_type")]
    public string? MeterType { get; init; }

    ///<summary>The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record ZwaveJsSetConfigParameterParameters
{
    ///<summary>The configuration parameter&apos;s endpoint. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name (or ID) of the configuration parameter you want to configure. eg: Minimum brightness level</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>Target a specific bitmask (see the documentation for more information). Cannot be combined with value_size or value_format.</summary>
    [JsonPropertyName("bitmask")]
    public string? Bitmask { get; init; }

    ///<summary>The new value to set for this configuration parameter. eg: 5</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record ZwaveJsSetValueParameters
{
    ///<summary>The ID of the command class for the value. eg: 117</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint for the value. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The ID of the property for the value. eg: currentValue</summary>
    [JsonPropertyName("property")]
    public string? Property { get; init; }

    ///<summary>The ID of the property key for the value. eg: 1</summary>
    [JsonPropertyName("property_key")]
    public string? PropertyKey { get; init; }

    ///<summary>The new value to set. eg: ffbb99</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the service call can take a while if setting a value on an asleep battery device.</summary>
    [JsonPropertyName("wait_for_result")]
    public bool? WaitForResult { get; init; }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class HiveEntityExtensionMethods
{
    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    public static void BoostHeatingOn(this IClimateEntityCore target, HiveBoostHeatingOnParameters data)
    {
        target.CallService("boost_heating_on", data);
    }

    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    public static void BoostHeatingOn(this IEnumerable<IClimateEntityCore> target, HiveBoostHeatingOnParameters data)
    {
        target.CallService("boost_heating_on", data);
    }

    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost. eg: 01:30:00</param>
    ///<param name="temperature">Set the target temperature for the boost period.</param>
    public static void BoostHeatingOn(this IClimateEntityCore target, DateTime timePeriod, double? temperature = null)
    {
        target.CallService("boost_heating_on", new HiveBoostHeatingOnParameters { TimePeriod = timePeriod, Temperature = temperature });
    }

    ///<summary>Sets the boost mode ON defining the period of time and the desired target temperature for the boost.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="timePeriod">Set the time period for the boost. eg: 01:30:00</param>
    ///<param name="temperature">Set the target temperature for the boost period.</param>
    public static void BoostHeatingOn(this IEnumerable<IClimateEntityCore> target, DateTime timePeriod, double? temperature = null)
    {
        target.CallService("boost_heating_on", new HiveBoostHeatingOnParameters { TimePeriod = timePeriod, Temperature = temperature });
    }
}

public static class HueEntityExtensionMethods
{
    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this ISceneEntityCore target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this ISceneEntityCore target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }
}

public static class ZhaEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this ILockEntityCore target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this ILockEntityCore target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this ILockEntityCore target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this ILockEntityCore target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this ILockEntityCore target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }
}

public static class ZwaveJsEntityExtensionMethods
{
    ///<summary>Resets the meters on a node.</summary>
    public static void ResetMeter(this ISensorEntityCore target, ZwaveJsResetMeterParameters data)
    {
        target.CallService("reset_meter", data);
    }

    ///<summary>Resets the meters on a node.</summary>
    public static void ResetMeter(this IEnumerable<ISensorEntityCore> target, ZwaveJsResetMeterParameters data)
    {
        target.CallService("reset_meter", data);
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public static void ResetMeter(this ISensorEntityCore target, string? meterType = null, string? value = null)
    {
        target.CallService("reset_meter", new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public static void ResetMeter(this IEnumerable<ISensorEntityCore> target, string? meterType = null, string? value = null)
    {
        target.CallService("reset_meter", new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }
}